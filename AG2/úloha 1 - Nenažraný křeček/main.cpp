#include "Hamster.h"
using namespace std;


const std::vector<std::pair<int, Maze>> test_data = {
  // Simple
  { 4, Maze{ 0, 1,
    { 0, 1, 1, 2, 1 },
    {
      { 0, 2 }, { 0, 3 },
      { 2, 4 }, { 3, 4 },
      { 0, 1 }, { 4, 1 }
    }
  }},
  { 8, Maze{ 3, 7,
    {
        1,  1,  0,  0,  1,  2,  0,  0,  0,  1,  2,  2, 2,
       }, {
      { 0,  2}, { 1,  8}, { 2,  4}, { 2,  7}, { 2, 11}, { 3,  6},
      { 3,  9}, { 3, 10}, { 4,  7}, { 5,  8}, { 6,  1}, { 6,  5},
      { 6,  8}, { 8,  0}, { 8,  2}, { 8, 12}, { 9,  6}, {10,  6},
      {11,  7}, {12,  2},
    }
  }},
  { -1, Maze{ 4, 5,
    {
       2,  1,  0,  0,  2,  0,  2,  2,  1,  0,  1,  0, 1,
    }, {
      { 0,  2}, { 1,  5}, { 3,  0}, { 3,  2}, { 3, 10}, { 4,  3},
      { 5,  6}, { 5,  8}, { 5, 11}, { 6, 11}, { 7,  5}, { 8, 11},
      { 9,  1}, { 9,  5}, { 9,  7}, {10,  2}, {11,  3}, {11,  4},
      {11, 12}, {12,  3},
    }
  }},

  // Acyclic
  { -1, Maze{ 2, 4,
    {
       6,  1,  3,  0,  3,  6,  4,  0,
    }, {
      { 0,  1}, { 0,  6}, { 1,  6}, { 3,  0}, { 3,  2}, { 3,  6},
      { 4,  1}, { 4,  5}, { 5,  0}, { 5,  1}, { 5,  6}, { 6,  2},
      { 7,  2}, { 7,  3}, { 7,  4},
    }
  }},
  { -1, Maze{ 3, 7,
    {
       0,  0,  0,  2,  0,  6,  6,  0,
    }, {
      { 1,  0}, { 1,  3}, { 1,  5}, { 2,  1}, { 3,  5}, { 4,  2},
      { 5,  6}, { 7,  3}, { 7,  4}, { 7,  5}, { 7,  6},
    }
  }},
  { 6, Maze{ 0, 6,
    {
       2,  2,  2,  1,  0,  0,  4,  6,
    }, {
      { 0,  5}, { 0,  6}, { 2,  1}, { 3,  2}, { 4,  1}, { 4,  2},
      { 5,  7}, { 6,  1}, { 6,  2}, { 6,  4}, { 6,  5}, { 6,  7},
      { 7,  1},
    }
  }},

  // General
  { 23, Maze{ 1, 8,
    {
       3,  6,  4,  0,  6,  4,  6,  3,  0,  3,
    }, {
      { 0,  8}, { 1,  5}, { 2,  6}, { 2,  9}, { 3,  0}, { 3,  2},
      { 3,  8}, { 4,  2}, { 4,  8}, { 5,  3}, { 5,  8}, { 6,  0},
      { 7,  2}, { 7,  3}, { 8,  1}, { 8,  9},
    }
  }},
  { -1, Maze{ 6, 7,
    {
       5,  0,  0,  1,  5,  0,  0,  0,  2,  5,
    }, {
      { 0,  4}, { 0,  9}, { 1,  4}, { 2,  3}, { 3,  5}, { 3,  6},
      { 4,  0}, { 5,  8}, { 6,  1}, { 6,  4}, { 7,  0}, { 7,  1},
      { 7,  8}, { 9,  4},
    }
  }},
  { 14, Maze{ 5, 6,
    {
       5,  0,  1,  3,  2,  3,  6,  5,  0,  0,
    }, {
      { 0,  4}, { 0,  6}, { 1,  0}, { 1,  5}, { 2,  4}, { 3,  7},
      { 4,  2}, { 5,  0}, { 5,  1}, { 5,  4}, { 6,  4}, { 7,  9},
      { 8,  4}, { 8,  6}, { 9,  8},
    }
  }},
  { 15, Maze{ 1, 2,
    {
       1,  0,  6,  0,  0,  0,  5,  0,  5,  4,
    }, {
      { 1,  3}, { 1,  7}, { 3,  2}, { 3,  7}, { 3,  9}, { 4,  5},
      { 4,  7}, { 5,  3}, { 5,  8}, { 7,  3}, { 7,  8}, { 8,  1},
      { 8,  6}, { 9,  5}, { 9,  8},
    }
  }},
  { -1, Maze{ 9, 3,
    {
       1,  4,  2,  3,  0,  1,  0,  4,  1,  0,
    }, {
      { 0,  1}, { 1,  0}, { 1,  5}, { 1,  9}, { 2,  0}, { 2,  5},
      { 2,  7}, { 3,  9}, { 4,  9}, { 6,  2}, { 6,  3}, { 6,  5},
      { 7,  0}, { 7,  2}, { 7,  3}, { 7,  8}, { 8,  2}, { 9,  4},
    }
  }},
};


Maze zaklad = { 9, 5,
           { 0,0,1,1,0,0,1,1,0,1,1,0,1 },
           {
                   {0, 12}, {12, 11}, {11, 0},
                   {7, 8}, {8, 7}, {8, 10}, {10, 8},
                   {1, 4}, {2, 1}, {2, 5}, {5, 2}, {3, 5}, {5, 6}, {6, 5}, {5, 3}, {4, 3}, {4, 2},

                   {9, 10}, {9, 1},
                   {0, 9}, {11, 6},
                   {5, 8}, {1, 7}
           }
};


Maze nesouvisly = {
        0, 1,
        {0,0},
        {}
};


Maze generateMaze(int vertexCnt = 10, int edgeCnt = 15, int minMnamek = 0, int maxMnamek = 3, int seed = time(NULL)) {
    srand(seed);

    vector<int> vertices;
    vector<Corridor> edges;

    for(int i = 0; i < vertexCnt; i++) {
        int randNum = rand()%(maxMnamek-minMnamek + 1) + minMnamek;
        vertices.push_back(randNum);
    }

    for(int i = 0; i < edgeCnt; i++) {
        int u = rand()%vertexCnt;
        int v = rand()%vertexCnt;
        edges.push_back({u, v});
    }

    int start = rand()%vertexCnt;
    int end = rand()%vertexCnt;
    return Maze { start, end, vertices, edges };
}


int main() {
    ///*
    for (const auto& [v, M] : test_data)
        if (v != hungry_hamster(M))
            std::cout << "Fail: " << v << " != " << hungry_hamster(M) << "\n" << M << std::endl;
    //*/

    //cout << test_data[6].second<< endl;
    //hungry_hamster(test_data[6].second);

    /*
    for (int i = 0; i < 100; ++i) {
        hungry_hamster(generateMaze(1000, 50000, 100, 500));
        cout << i << flush;
    }
    */

    cout << "\nDone" << endl;
    return 0;
}
